"""main.py
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (polling) –∏ production (webhook).
"""
from __future__ import annotations

import asyncio
import logging
import signal
import sys
import os
from typing import Optional
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å event loop –Ω–∞ Windows
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
try:
    from dotenv import load_dotenv  # type: ignore
    load_dotenv()
except Exception as e:  # noqa: BLE001
    logging.getLogger(__name__).warning("Could not load .env via python-dotenv: %s", e)

from aiogram import Bot, Dispatcher

from src.config import Settings
from src.db.connection import initialize_database
from src.handlers import context_handler, memory_handler


def setup_logging() -> None:
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    )


def setup_sentry(dsn: Optional[str]) -> None:
    if dsn:
        try:
            import sentry_sdk  # type: ignore

            sentry_sdk.init(dsn=dsn, traces_sample_rate=1.0)
        except Exception as e:  # noqa: BLE001
            logging.getLogger(__name__).warning("Sentry init failed: %s", e)


async def polling_app() -> None:
    settings = Settings.from_env()
    setup_logging()
    setup_sentry(settings.sentry_dsn)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db_manager = initialize_database(settings)
    await db_manager.initialize()

    bot = Bot(settings.telegram_bot_token)
    dp = Dispatcher()

    # Routers
    dp.include_router(context_handler.router)
    dp.include_router(memory_handler.router)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ graceful shutdown
    shutdown_event = asyncio.Event()
    
    def signal_handler(signum, frame):
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        shutdown_event.set()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)   # Ctrl+C
    signal.signal(signal.SIGTERM, signal_handler)  # SIGTERM
    
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
        print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ —Ñ–æ–Ω–µ
        polling_task = asyncio.create_task(
            dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        )
        
        # –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await shutdown_event.wait()
        
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é polling...")
        polling_task.cancel()
        
        try:
            await polling_task
        except asyncio.CancelledError:
            pass
        
        print("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
        raise
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await bot.session.close()
        await db_manager.close()


async def webhook_app() -> web.Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ webhook –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è production."""
    settings = Settings.from_env()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await initialize_database()
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=settings.telegram_bot_token)
    dp = Dispatcher()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(context_handler.router)
    dp.include_router(memory_handler.router)
    
    # –°–æ–∑–¥–∞–µ–º webhook –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    webhook_path = "/webhook"
    webhook_url = os.getenv("WEBHOOK_URL", f"https://your-app.railway.app{webhook_path}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.set_webhook(webhook_url)
    print(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    webhook_handler.register(app, path=webhook_path)
    
    # –î–æ–±–∞–≤–ª—è–µ–º health check
    async def health_check(request):
        return web.Response(text="OK")
    
    app.router.add_get("/health", health_check)
    
    return app

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–∏ –º—ã –≤ production (webhook) –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ (polling)
    if os.getenv("RAILWAY_ENVIRONMENT") or os.getenv("WEBHOOK_MODE"):
        # Production —Ä–µ–∂–∏–º - webhook
        print("üöÄ –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ (webhook)")
        try:
            app = asyncio.run(webhook_app())
            web.run_app(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            sys.exit(1)
    else:
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - polling
        print("üè† –ó–∞–ø—É—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ (polling)")
        try:
            asyncio.run(polling_app())
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            sys.exit(0)
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)


if __name__ == "__main__":
    main()
