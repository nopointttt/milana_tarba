"""src/handlers/step_handler.py
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤.
"""
from __future__ import annotations

import asyncio
from typing import Dict, Any, Optional
from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.services.analytics.analytics_service import AnalyticsService
from src.services.user_service import UserService
from src.services.analytics_storage import AnalyticsStorageService
from src.services.openai_service import OpenAIService
from src.db.connection import get_db_manager
from src.config import Settings

router = Router()
analytics_service = AnalyticsService()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[int, Dict[str, Any]] = {}


def format_openai_response(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram."""
    import re
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = text.strip()
    
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ OpenAI –∏—Ö –≤–µ—Ä–Ω–µ—Ç)
    text = re.sub(r'<[^>]+>', '', text)
    
    # –£–±–∏—Ä–∞–µ–º HTML entities
    text = text.replace('&nbsp;', ' ')
    text = text.replace('&amp;', '&')
    text = text.replace('&lt;', '<')
    text = text.replace('&gt;', '>')
    text = text.replace('&quot;', '"')
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ Markdown —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    text = re.sub(r'```[^`]*```', '', text)  # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
    text = re.sub(r'`[^`]*`', '', text)      # –£–±–∏—Ä–∞–µ–º inline –∫–æ–¥
    text = re.sub(r'#{1,6}\s+', '', text)    # –£–±–∏—Ä–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    text = re.sub(r'^\s*[-*+]\s+', '', text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–∫–∏
    text = re.sub(r'^\s*\d+\.\s+', '', text, flags=re.MULTILINE)  # –£–±–∏—Ä–∞–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    text = re.sub(r'\[([^\]]*)\]\([^)]*\)', r'\1', text)  # –£–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ Markdown —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\*\*([^*]+)\*\*', r'**\1**', text)  # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = re.sub(r'\*([^*]+)\*', r'*\1*', text)        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫—É—Ä—Å–∏–≤
    
    # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–ª–æ–º–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥
    text = re.sub(r'(?<!\*)\*(?!\*)', '', text)  # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ *
    text = re.sub(r'(?<!_)_(?!_)', '', text)     # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ _
    text = re.sub(r'(?<!`)`(?!`)', '', text)     # –£–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ `
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∂–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    text = text.replace("‚ú® –¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å", "‚ú® **–¢–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å**")
    text = text.replace("‚ù§Ô∏è –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å–µ–ª", "‚ù§Ô∏è **–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —á–∏—Å–µ–ª**")
    text = text.replace("üíé –ú–∞—Ç—Ä–∏—Ü–∞ —Ç–≤–æ–∏—Ö —ç–Ω–µ—Ä–≥–∏–π", "üíé **–ú–∞—Ç—Ä–∏—Ü–∞ —Ç–≤–æ–∏—Ö —ç–Ω–µ—Ä–≥–∏–π**")
    text = text.replace("üí° –¢–≤–æ–∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏", "üí° **–¢–≤–æ–∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –∫ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º
    text = text.replace("‚û°Ô∏è –ü—Ä–∞–∫—Ç–∏–∫–∞", "‚û°Ô∏è **–ü—Ä–∞–∫—Ç–∏–∫–∞**")
    text = text.replace("‚û°Ô∏è –ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ", "‚û°Ô∏è **–ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –∂–µ–ª–∞–Ω–∏–µ**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å–∏–≤ –∫ –≤–∞–∂–Ω—ã–º —Ñ—Ä–∞–∑–∞–º
    text = text.replace("–î–æ—Ä–æ–≥–∞—è", "*–î–æ—Ä–æ–≥–∞—è")
    text = text.replace("–° —Ç–µ–ø–ª–æ–º –∏ –∑–∞–±–æ—Ç–æ–π,", "*–° —Ç–µ–ø–ª–æ–º –∏ –∑–∞–±–æ—Ç–æ–π,*")
    text = text.replace("–ú–∏–ª–∞–Ω–∞", "–ú–∏–ª–∞–Ω–∞*")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)  # –ú–∞–∫—Å–∏–º—É–º 2 –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–¥—Ä—è–¥
    text = re.sub(r' +', ' ', text)               # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    
    return text

async def send_long_message(message: types.Message, text: str, max_length: int = 4000) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    import re
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    formatted_text = format_openai_response(text)
    
    if len(formatted_text) <= max_length:
        try:
            await message.answer(formatted_text, parse_mode="Markdown")
            return
        except Exception as e:
            print(f"‚ö†Ô∏è Markdown parsing error, sending as plain text: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            plain_text = re.sub(r'[*_`]', '', formatted_text)  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ Markdown —Å–∏–º–≤–æ–ª—ã
            await message.answer(plain_text)
            return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    sections = formatted_text.split('\n\n')
    current_message = ""
    
    for section in sections:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
        if len(current_message) + len(section) + 2 > max_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_message.strip():
                try:
                    await message.answer(current_message.strip(), parse_mode="Markdown")
                except Exception as e:
                    print(f"‚ö†Ô∏è Markdown parsing error, sending as plain text: {e}")
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                    plain_text = re.sub(r'[*_`]', '', current_message.strip())
                    await message.answer(plain_text)
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            current_message = section
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if current_message:
                current_message += "\n\n" + section
            else:
                current_message = section
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_message.strip():
        try:
            await message.answer(current_message.strip(), parse_mode="Markdown")
        except Exception as e:
            print(f"‚ö†Ô∏è Markdown parsing error, sending as plain text: {e}")
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            plain_text = re.sub(r'[*_`]', '', current_message.strip())
            await message.answer(plain_text)


@router.message()
async def process_user_input(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_data:
        user_data[user_id] = {}
    
    current_state = user_data[user_id].get('state', '')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if current_state == 'full_analysis_query':
        await handle_full_analysis_query(message, text)
    elif current_state == 'full_analysis_date':
        await handle_full_analysis_date(message, text)
    elif current_state == 'full_analysis_name':
        await handle_full_analysis_name(message, text)
    elif current_state == 'consciousness_query':
        await handle_consciousness_query(message, text)
    elif current_state == 'consciousness_date':
        await handle_consciousness_date(message, text)
    elif current_state == 'action_query':
        await handle_action_query(message, text)
    elif current_state == 'action_date':
        await handle_action_date(message, text)
    elif current_state == 'name_query':
        await handle_name_query(message, text)
    elif current_state == 'name_input':
        await handle_name_input(message, text)
    elif current_state == 'matrix_query':
        await handle_matrix_query(message, text)
    elif current_state == 'matrix_date':
        await handle_matrix_date(message, text)
    elif current_state == 'practices_query':
        await handle_practices_query(message, text)
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await message.answer(
            "‚ùì **–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É.**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ üëá",
            parse_mode="Markdown"
        )


# === –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó ===

async def handle_full_analysis_query(message: types.Message, query: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    user_id = message.from_user.id
    user_data[user_id]['query'] = query
    user_data[user_id]['state'] = 'full_analysis_date'
    
    await message.answer(
        "**üìÖ –®–∞–≥ 2 –∏–∑ 3: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n\n"
        "*–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`*",
        parse_mode="Markdown"
    )


async def handle_full_analysis_date(message: types.Message, date_str: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    if not analytics_service.validate_birth_date(date_str):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`",
            parse_mode="Markdown"
        )
        return
    
    user_id = message.from_user.id
    user_data[user_id]['birth_date'] = date_str
    user_data[user_id]['state'] = 'full_analysis_name'
    
    await message.answer(
        "**üë§ –®–∞–≥ 3 –∏–∑ 3: –ò–º—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞)\n\n"
        "*–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤` –∏–ª–∏ `Ivan Petrov`*",
        parse_mode="Markdown"
    )


async def handle_full_analysis_name(message: types.Message, name: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."""
    if not analytics_service.validate_name(name):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`",
            parse_mode="Markdown"
        )
        return
    
    user_id = message.from_user.id
    user_data[user_id]['name'] = name
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    await perform_full_analysis(message, user_data[user_id])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del user_data[user_id]


# === –ß–ò–°–õ–û –°–û–ó–ù–ê–ù–ò–Ø ===

async def handle_consciousness_query(message: types.Message, query: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è."""
    user_id = message.from_user.id
    user_data[user_id]['query'] = query
    user_data[user_id]['state'] = 'consciousness_date'
    
    await message.answer(
        "**üìÖ –®–∞–≥ 2 –∏–∑ 2: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n\n"
        "*–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`*",
        parse_mode="Markdown"
    )


async def handle_consciousness_date(message: types.Message, date_str: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è."""
    if not analytics_service.validate_birth_date(date_str):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`",
            parse_mode="Markdown"
        )
        return
    
    user_id = message.from_user.id
    user_data[user_id]['birth_date'] = date_str
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è
    await perform_consciousness_analysis(message, user_data[user_id])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del user_data[user_id]


# === –ß–ò–°–õ–û –î–ï–ô–°–¢–í–ò–Ø ===

async def handle_action_query(message: types.Message, query: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    user_id = message.from_user.id
    user_data[user_id]['query'] = query
    user_data[user_id]['state'] = 'action_date'
    
    await message.answer(
        "**üìÖ –®–∞–≥ 2 –∏–∑ 2: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n\n"
        "*–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`*",
        parse_mode="Markdown"
    )


async def handle_action_date(message: types.Message, date_str: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    if not analytics_service.validate_birth_date(date_str):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`",
            parse_mode="Markdown"
        )
        return
    
    user_id = message.from_user.id
    user_data[user_id]['birth_date'] = date_str
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è
    await perform_action_analysis(message, user_data[user_id])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del user_data[user_id]


# === –ß–ò–°–õ–û –ò–ú–ï–ù–ò ===

async def handle_name_query(message: types.Message, query: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å–ª–∞ –∏–º–µ–Ω–∏."""
    user_id = message.from_user.id
    user_data[user_id]['query'] = query
    user_data[user_id]['state'] = 'name_input'
    
    await message.answer(
        "**üë§ –®–∞–≥ 2 –∏–∑ 2: –ò–º—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞)\n\n"
        "*–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤` –∏–ª–∏ `Ivan Petrov`*",
        parse_mode="Markdown"
    )


async def handle_name_input(message: types.Message, name: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–∏—Å–ª–∞ –∏–º–µ–Ω–∏."""
    if not analytics_service.validate_name(name):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤`",
            parse_mode="Markdown"
        )
        return
    
    user_id = message.from_user.id
    user_data[user_id]['name'] = name
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞ –∏–º–µ–Ω–∏
    await perform_name_analysis(message, user_data[user_id])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del user_data[user_id]


# === –ú–ê–¢–†–ò–¶–ê ===

async def handle_matrix_query(message: types.Message, query: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—Ä–∏—Ü—ã."""
    user_id = message.from_user.id
    user_data[user_id]['query'] = query
    user_data[user_id]['state'] = 'matrix_date'
    
    await message.answer(
        "**üìÖ –®–∞–≥ 2 –∏–∑ 2: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n\n"
        "*–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`*",
        parse_mode="Markdown"
    )


async def handle_matrix_date(message: types.Message, date_str: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –º–∞—Ç—Ä–∏—Ü—ã."""
    if not analytics_service.validate_birth_date(date_str):
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`",
            parse_mode="Markdown"
        )
        return
    
    user_id = message.from_user.id
    user_data[user_id]['birth_date'] = date_str
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
    await perform_matrix_analysis(message, user_data[user_id])
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    del user_data[user_id]


# === –ü–†–ê–ö–¢–ò–ö–ò ===

async def handle_practices_query(message: types.Message, query: str) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫."""
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫
    await perform_practices_search(message, query)


# === –í–´–ü–û–õ–ù–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–û–í ===

async def perform_full_analysis(message: types.Message, data: Dict[str, Any]) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
    try:
        await message.answer("üîÑ **–í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑...**", parse_mode="Markdown")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = analytics_service.analyze_person(data['birth_date'], data['name'])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç OpenAI
        await get_personalized_report(
            message, 
            analysis_type="full",
            query=data['query'],
            birth_date=data['birth_date'],
            name=data['name'],
            analysis_data=analysis
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )


async def perform_consciousness_analysis(message: types.Message, data: Dict[str, Any]) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞ —Å–æ–∑–Ω–∞–Ω–∏—è."""
    try:
        await message.answer("üîÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∏—Å–ª–æ —Å–æ–∑–Ω–∞–Ω–∏—è...**", parse_mode="Markdown")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ
        analysis = analytics_service.analyze_person_date_only(data['birth_date'])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç OpenAI
        await get_personalized_report(
            message, 
            analysis_type="consciousness",
            query=data['query'],
            birth_date=data['birth_date'],
            name=None,
            analysis_data=analysis
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )


async def perform_action_analysis(message: types.Message, data: Dict[str, Any]) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    try:
        await message.answer("üîÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∏—Å–ª–æ –¥–µ–π—Å—Ç–≤–∏—è...**", parse_mode="Markdown")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ
        analysis = analytics_service.analyze_person_date_only(data['birth_date'])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç OpenAI
        await get_personalized_report(
            message, 
            analysis_type="action",
            query=data['query'],
            birth_date=data['birth_date'],
            name=None,
            analysis_data=analysis
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )


async def perform_name_analysis(message: types.Message, data: Dict[str, Any]) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–∏—Å–ª–∞ –∏–º–µ–Ω–∏."""
    try:
        await message.answer("üîÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–∏—Å–ª–æ –∏–º–µ–Ω–∏...**", parse_mode="Markdown")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–º–µ–Ω–∏
        from src.services.analytics.name_number import calc_name_number, get_name_interpretation
        from src.services.analytics.transliteration import normalize_name_for_calculation, is_cyrillic_text
        
        original_name = data['name'].strip()
        is_cyrillic = is_cyrillic_text(original_name)
        
        if is_cyrillic:
            latin_name = normalize_name_for_calculation(original_name)
        else:
            latin_name = normalize_name_for_calculation(original_name)
        
        name_number = calc_name_number(latin_name)
        name_interpretation = get_name_interpretation(name_number)
        
        analysis = {
            "input_data": {
                "original_name": original_name,
                "latin_name": latin_name,
                "is_cyrillic": is_cyrillic
            },
            "calculations": {
                "consciousness_number": None,
                "action_number": None,
                "name_number": name_number
            },
            "interpretations": {
                "consciousness_interpretation": None,
                "action_interpretation": None,
                "name_interpretation": name_interpretation
            },
            "matrix": {
                "digit_counts": {},
                "missing_digits": [],
                "strong_digits": [],
                "weak_digits": [],
                "analysis": "–ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏"
            },
            "exceptions": {
                "has_chs_chd_conflict": False
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç OpenAI
        await get_personalized_report(
            message, 
            analysis_type="name",
            query=data['query'],
            birth_date=None,
            name=data['name'],
            analysis_data=analysis
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )


async def perform_matrix_analysis(message: types.Message, data: Dict[str, Any]) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—Ä–∏—Ü—ã."""
    try:
        await message.answer("üîÑ **–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –º–∞—Ç—Ä–∏—Ü—É...**", parse_mode="Markdown")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ
        analysis = analytics_service.analyze_person_date_only(data['birth_date'])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç OpenAI
        await get_personalized_report(
            message, 
            analysis_type="matrix",
            query=data['query'],
            birth_date=data['birth_date'],
            name=None,
            analysis_data=analysis
        )
        
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞:** {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )


async def perform_practices_search(message: types.Message, query: str) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –ø—Ä–∞–∫—Ç–∏–∫."""
    try:
        await message.answer("üîÑ **–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏...**", parse_mode="Markdown")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Ç OpenAI
        await get_practices_from_openai(message, query)
        
    except Exception as e:
        await message.answer(
            f"‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∞–∫—Ç–∏–∫:** {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É.",
            parse_mode="Markdown"
        )


async def get_personalized_report(
    message: types.Message,
    analysis_type: str,
    query: str,
    birth_date: Optional[str],
    name: Optional[str],
    analysis_data: Dict[str, Any]
) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç OpenAI."""
    try:
        settings = Settings.from_env()
        openai_service = OpenAIService(
            api_key=settings.openai_api_key,
            assistant_id=settings.openai_assistant_id
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è OpenAI
        openai_data = {
            "analysis_type": analysis_type,
            "user_query": query,
            "birth_date": birth_date,
            "name": name,
            "analysis_data": analysis_data
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ analysis_data —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–µ –∫–ª—é—á–∏
        if 'calculations' not in analysis_data:
            analysis_data['calculations'] = {}
        if 'interpretations' not in analysis_data:
            analysis_data['interpretations'] = {}
        if 'matrix' not in analysis_data:
            analysis_data['matrix'] = {}
        
        await message.answer("ü§ñ **–ü–æ–ª—É—á–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...**", parse_mode="Markdown")
        
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç –æ—Ç OpenAI
        report = await openai_service.analyze_person(
            birth_date=birth_date or "",
            full_name=name,
            analysis_data=analysis_data
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await send_long_message(message, report)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(
            "üéâ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é üëá",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        await message.answer(
            "‚ùå **–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown"
        )


async def get_practices_from_openai(message: types.Message, query: str) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Ç OpenAI."""
    try:
        settings = Settings.from_env()
        openai_service = OpenAIService(
            api_key=settings.openai_api_key,
            assistant_id=settings.openai_assistant_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏ –æ—Ç OpenAI —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        practices = await openai_service.search_practices(query)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–∫—Ç–∏–∫–∏
        await send_long_message(message, practices)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(
            "üéâ **–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            "–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é üëá",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        await message.answer(
            "‚ùå **–°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–∫—Ç–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown"
        )
