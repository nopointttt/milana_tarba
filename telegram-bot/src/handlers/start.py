"""src/handlers/start.py
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.
"""
from __future__ import annotations
import asyncio

from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.ext.asyncio import AsyncSession

from src.services.analytics.analytics_service import AnalyticsService
from src.services.user_service import UserService
from src.services.analytics_storage import AnalyticsStorageService
from src.services.openai_service import OpenAIService
from src.db.connection import get_db_manager
from src.config import Settings

router = Router()
analytics_service = AnalyticsService()


WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–µ –ú–∏–ª–∞–Ω—ã –¢–∞—Ä–±–∞.\n\n"
    "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20.05.1997"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –ø–æ–º–æ—â—å—é
input_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


@router.message(CommandStart())
async def on_start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        WELCOME,
        reply_markup=input_keyboard
    )




@router.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def show_help(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É."""
    help_text = (
        "**üìñ –°–ü–†–ê–í–ö–ê –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ –ë–û–¢–ê**\n\n"
        "**üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:**\n"
        "‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: `dd.mm.yyyy`\n"
        "‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: `15.03.1990`, `01.01.2000`\n\n"
        "**üë§ –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏:**\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ: *–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤*\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ: *Ivan Petrov*\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è (–∏–º—è + —Ñ–∞–º–∏–ª–∏—è)\n\n"
        "**üîÆ –ß—Ç–æ —è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é:**\n"
        "‚Ä¢ **–ß–∏—Å–ª–æ –°–æ–∑–Ω–∞–Ω–∏—è (–ß–°)**\n"
        "‚Ä¢ **–ß–∏—Å–ª–æ –î–µ–π—Å—Ç–≤–∏—è (–ß–î)**\n"
        "‚Ä¢ **–ú–∞—Ç—Ä–∏—Ü–∞ —ç–Ω–µ—Ä–≥–∏–π**\n"
        "‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏**\n\n"
        "*–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ ¬´–ö–Ω–∏–≥–µ –ó–Ω–∞–Ω–∏–π –ø–æ –¶–∏—Ñ—Ä–æ–ª–æ–≥–∏–∏¬ª —Å–∏—Å—Ç–µ–º—ã –ú–∏–ª–∞–Ω—ã –¢–∞—Ä–±–∞.*"
    )
    
    await message.answer(help_text, parse_mode="Markdown")


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


def convert_markdown_to_html(text: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Markdown –≤ HTML –¥–ª—è Telegram."""
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏
    text = text.replace('<br>', '\n')
    text = text.replace('<br/>', '\n')
    text = text.replace('<br />', '\n')
    text = text.replace('<p>', '')
    text = text.replace('</p>', '\n\n')
    text = text.replace('<div>', '')
    text = text.replace('</div>', '\n')
    
    # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    text = text.replace('### ', '<b>')
    text = text.replace('## ', '<b>')
    text = text.replace('# ', '<b>')
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    lines = text.split('\n')
    for i, line in enumerate(lines):
        if line.startswith('<b>') and not line.endswith('</b>'):
            # –ò—â–µ–º –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if i + 1 < len(lines) and (lines[i + 1].startswith('<b>') or lines[i + 1].startswith('---') or lines[i + 1].strip() == ''):
                lines[i] = line + '</b>'
            elif line.strip() and not line.endswith('</b>'):
                lines[i] = line + '</b>'
    
    text = '\n'.join(lines)
    
    # –ó–∞–º–µ–Ω—è–µ–º –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    text = text.replace('**', '<b>')
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–µ–≥–∏
    text = text.replace('<b><b>', '<b>')
    text = text.replace('</b></b>', '</b>')
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫—É—Ä—Å–∏–≤
    text = text.replace('*', '<i>')
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ —Ç–µ–≥–∏
    text = text.replace('<i><i>', '<i>')
    text = text.replace('</i></i>', '</i>')
    
    # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
    text = text.replace('---', '<i>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</i>')
    
    # –ó–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–∫–∏
    text = text.replace('‚Ä¢ ', '‚Ä¢ ')
    
    # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    text = text.replace('\n\n\n', '\n\n')
    
    return text.strip()


async def send_long_message(message: types.Message, text: str, max_length: int = 4000) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏."""
    if len(text) <= max_length:
        await message.answer(text, parse_mode="Markdown")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
    sections = text.split('\n\n')
    current_message = ""
    
    for section in sections:
        # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
        if len(current_message) + len(section) + 2 > max_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if current_message.strip():
                await message.answer(current_message.strip(), parse_mode="Markdown")
                await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
            current_message = section
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            if current_message:
                current_message += "\n\n" + section
            else:
                current_message = section
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if current_message.strip():
        await message.answer(current_message.strip(), parse_mode="Markdown")

@router.message()
async def process_user_input(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = message.text.strip()
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_data:
        user_data[user_id] = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–µ—Å–ª–∏ –Ω–µ –≤–≤–µ–ª–∏ –¥–∞—Ç—É)
    if analytics_service.validate_birth_date(text) and 'birth_date' not in user_data[user_id]:
        user_data[user_id]['birth_date'] = text
        
        await message.answer(
            f"–°–ø–∞—Å–∏–±–æ –¥–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞: {text}\n"
            "–í–≤–µ–¥–∏—Ç–µ –∏–º—è",
            parse_mode="Markdown"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–º—è (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞, –Ω–æ –Ω–µ—Ç –∏–º–µ–Ω–∏)
    if analytics_service.validate_name(text) and 'birth_date' in user_data[user_id] and 'name' not in user_data[user_id]:
        user_data[user_id]['name'] = text
        
        await message.answer(
            "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑",
            parse_mode="Markdown"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        await perform_analysis_with_data(message, user_data[user_id]['birth_date'], text)
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        del user_data[user_id]
        return
    
    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç
    if 'birth_date' not in user_data[user_id]:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `dd.mm.yyyy`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `20.05.1997`",
            parse_mode="Markdown"
        )
    elif 'name' not in user_data[user_id]:
        await message.answer(
            "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏.**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–æ–¥–Ω–æ —Å–ª–æ–≤–æ)\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω*",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ `/start` –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.",
            parse_mode="Markdown"
        )


async def perform_analysis_with_data(message: types.Message, birth_date: str, name: str = None) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."""
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        await message.answer("üîÑ **–í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á—ë—Ç—ã...**", parse_mode="Markdown")
        
        if name:
            analysis = analytics_service.analyze_person(birth_date, name)
        else:
            # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è
            analysis = analytics_service.analyze_person_date_only(birth_date)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db_manager = get_db_manager()
            async with db_manager.get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_service = UserService(session)
                user = await user_service.get_or_create_user(
                    telegram_user_id=message.from_user.id,
                    username=message.from_user.username,
                    full_name=message.from_user.full_name
                )
                
                # Debug: –ø—Ä–æ–≤–µ—Ä—è–µ–º user.id
                print(f"üîç DEBUG: user.id = {user.id}, user.telegram_user_id = {user.telegram_user_id}")
                
                if user.id is None:
                    print("‚ùå ERROR: user.id is None! Committing and refreshing...")
                    await session.commit()
                    await session.refresh(user)
                    print(f"üîç DEBUG after refresh: user.id = {user.id}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
                storage_service = AnalyticsStorageService(session)
                from datetime import date
                from src.db.models import ReportStatus
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                day, month, year = map(int, birth_date.split('.'))
                birth_date_obj = date(year, month, day)
                
                await storage_service.save_analysis_result(
                    user_id=user.id,
                    full_name=name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                    birth_date=birth_date_obj,
                    analysis_result=analysis,
                    status=ReportStatus.DONE
                )
                
        except Exception as db_error:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {db_error}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç OpenAI
        try:
            settings = Settings.from_env()
            openai_service = OpenAIService(
                api_key=settings.openai_api_key,
                assistant_id=settings.openai_assistant_id
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            await message.answer("ü§ñ **–ü–æ–ª—É—á–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞...**", parse_mode="Markdown")
            
            personalized_report = await openai_service.analyze_person(
                birth_date=birth_date,
                full_name=name,
                analysis_data=analysis
            )
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown)
            await send_long_message(message, personalized_report)
            
        except Exception as e:
            # –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç—á—ë—Ç
            print(f"‚ö†Ô∏è OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            report = _format_analysis_report(analysis)
            await message.answer(report, parse_mode="Markdown")
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –ú–∞—Ç—Ä–∏—Ü–∞", callback_data=f"matrix_{message.from_user.id}")],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


def _format_analysis_report(analysis: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –∞–Ω–∞–ª–∏–∑–∞."""
    input_data = analysis["input_data"]
    calculations = analysis["calculations"]
    matrix = analysis["matrix"]
    interpretations = analysis["interpretations"]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    report = f"**üîÆ –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–û –°–ò–°–¢–ï–ú–ï –ú–ò–õ–ê–ù–´ –¢–ê–†–ë–ê**\n\n"
    
    # –í–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    report += f"**üìã –í–í–û–î–ù–´–ï –î–ê–ù–ù–´–ï**\n"
    if input_data.get('has_name', True):  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–º—è
        report += f"‚Ä¢ **–ò–º—è:** *{input_data['original_name']}*\n"
        if input_data.get('is_cyrillic', False):
            report += f"‚Ä¢ **–õ–∞—Ç–∏–Ω–∏—Ü–µ–π:** *{input_data['latin_name']}*\n"
    else:
        report += f"‚Ä¢ **–ò–º—è:** *–ù–µ —É–∫–∞–∑–∞–Ω–æ (–∞–Ω–∞–ª–∏–∑ —Ç–æ–ª—å–∫–æ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è)*\n"
    report += f"‚Ä¢ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** `{input_data['birth_date']}`\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞
    report += f"**üî¢ –ö–õ–Æ–ß–ï–í–´–ï –ß–ò–°–õ–ê**\n"
    report += f"‚Ä¢ **–ß–∏—Å–ª–æ –°–æ–∑–Ω–∞–Ω–∏—è (–ß–°):** `{calculations['consciousness_number']}`\n"
    report += f"‚Ä¢ **–ß–∏—Å–ª–æ –î–µ–π—Å—Ç–≤–∏—è (–ß–î):** `{calculations['action_number']}`\n"
    if calculations['name_number'] is not None:
        report += f"‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏:** `{calculations['name_number']}`\n"
    else:
        report += f"‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏:** *–ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ (–∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ)*\n"
    report += "\n"
    
    # –ú–∞—Ç—Ä–∏—Ü–∞
    report += f"**üìä –ú–ê–¢–†–ò–¶–ê –≠–ù–ï–†–ì–ò–ô**\n"
    if matrix['strong_digits']:
        report += f"‚Ä¢ **–°–∏–ª—å–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏:** `{', '.join(map(str, matrix['strong_digits']))}` (100% –∏ –≤—ã—à–µ)\n"
    if matrix['weak_digits']:
        report += f"‚Ä¢ **–°–ª–∞–±—ã–µ —ç–Ω–µ—Ä–≥–∏–∏:** `{', '.join(map(str, matrix['weak_digits']))}` (50%)\n"
    if matrix['missing_digits']:
        report += f"‚Ä¢ **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–µ—Ä–≥–∏–∏:** `{', '.join(map(str, matrix['missing_digits']))}`\n"
    report += f"‚Ä¢ **–ê–Ω–∞–ª–∏–∑:** {matrix['analysis']}\n\n"
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    report += f"**üí° –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø**\n"
    if 'consciousness_interpretation' in interpretations:
        report += f"‚Ä¢ **–ß–°:** {interpretations['consciousness_interpretation']}\n"
    if 'action_interpretation' in interpretations:
        report += f"‚Ä¢ **–ß–î:** {interpretations['action_interpretation']}\n"
    if 'name_interpretation' in interpretations:
        report += f"‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏:** {interpretations['name_interpretation']}\n"
    report += "\n"
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    if analysis['exceptions']['has_chs_chd_conflict']:
        report += f"‚ö†Ô∏è **–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:** –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –ß–° –∏ –ß–î\n\n"
    
    # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
    report += f"---\n"
    report += f"*–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ –±–∞–∑–µ –ø—Ä–∞–≤–∏–ª –∏–∑ ¬´–ö–Ω–∏–≥–∏ –ó–Ω–∞–Ω–∏–π –ø–æ –¶–∏—Ñ—Ä–æ–ª–æ–≥–∏–∏¬ª. "
    report += f"–†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä, –∞ –∫–∞—Ä—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.*"
    
    return report


@router.callback_query(lambda c: c.data == "new_analysis")
async def new_analysis_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑'."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback_query.from_user.id
    if user_id in user_data:
        del user_data[user_id]
    
    await callback_query.message.edit_text(
        "üîÑ **–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑!**\n\n"
        "**–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**\n"
        "‚Ä¢ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** `dd.mm.yyyy`\n"
        "‚Ä¢ **–ü–æ–ª–Ω–æ–µ –∏–º—è:** –í–∞—à–µ –∏–º—è\n\n"
        "**–ù–∞–ø—Ä–∏–º–µ—Ä:**\n"
        "`29.02.1988`\n"
        "*–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤*",
        parse_mode="Markdown"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("analyze_date_"))
async def analyze_date_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–µ'."""
    user_id = int(callback_query.data.split("_")[2])
    
    if user_id in user_data and 'birth_date' in user_data[user_id]:
        birth_date = user_data[user_id]['birth_date']
        await perform_analysis_with_data(callback_query.message, birth_date, None)
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        del user_data[user_id]
    else:
        await callback_query.answer("‚ùå **–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start**", parse_mode="Markdown")
    
    await callback_query.answer()


@router.callback_query(lambda c: c.data.startswith("add_name_"))
async def add_name_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∏–º—è'."""
    user_id = int(callback_query.data.split("_")[2])
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    if user_id not in user_data:
        user_data[user_id] = {}
    user_data[user_id]['waiting_for_name'] = True
    
    await callback_query.message.edit_text(
        "üë§ **–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è** (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏–ª–∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞):\n\n"
        "**–ù–∞–ø—Ä–∏–º–µ—Ä:** *–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤*\n"
        "**–∏–ª–∏:** *Ivan Petrov*",
        parse_mode="Markdown"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "help")
async def help_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    help_text = (
        "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É**\n\n"
        "**–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —á–∏—Å–ª–∞:**\n"
        "‚Ä¢ **–ß–°** - —á–µ–≥–æ —Ö–æ—á–µ—Ç –≤–∞—à–∞ –¥—É—à–∞ (—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)\n"
        "‚Ä¢ **–ß–î** - –∫–∞–∫ –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –ø–æ—Å–ª–µ 33 –ª–µ—Ç (–≤—Å—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)\n"
        "‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏** - —ç–Ω–µ—Ä–≥–∏—è –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –∏–º—è)\n"
        "‚Ä¢ **–ú–∞—Ç—Ä–∏—Ü–∞** - –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≤–∞—Å –∑–∞–ª–æ–∂–µ–Ω—ã (–≤—Å—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)\n\n"
        "**–°–∏–ª–∞ —ç–Ω–µ—Ä–≥–∏–π –≤ –º–∞—Ç—Ä–∏—Ü–µ:**\n"
        "‚Ä¢ 1 —Ü–∏—Ñ—Ä–∞ = 50% –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ 2 —Ü–∏—Ñ—Ä—ã = 100% –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ 3+ —Ü–∏—Ñ—Ä = —É—Å–∏–ª–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–¥\n\n"
        "–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ ¬´–ö–Ω–∏–≥–µ –ó–Ω–∞–Ω–∏–π –ø–æ –¶–∏—Ñ—Ä–æ–ª–æ–≥–∏–∏¬ª."
    )
    
    await callback_query.message.edit_text(help_text, parse_mode="Markdown")
    await callback_query.answer()
