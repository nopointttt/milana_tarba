"""src/handlers/memory_handler.py
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Memory Bank.
"""
from __future__ import annotations

import logging
from typing import Optional

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.services.memory_bank_service import MemoryBankService
from src.db.connection import DatabaseManager

logger = logging.getLogger(__name__)

router = Router()


class MemoryStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_type = State()
    waiting_for_importance = State()
    waiting_for_tags = State()
    editing_memory = State()
    searching_memories = State()


@router.message(Command("memory"))
async def memory_menu(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Memory Bank."""
    await state.clear()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="memory_create")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π", callback_data="memory_search")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="memory_list")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="memory_stats")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="memory_cancel")]
    ])
    
    await message.answer(
        "üß† **Memory Bank** - –í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "memory_create")
async def start_create_memory(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await callback.answer()
    await state.set_state(MemoryStates.waiting_for_title)
    
    await callback.message.edit_text(
        "üìù **–°–æ–∑–¥–∞–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        parse_mode="Markdown"
    )


@router.message(MemoryStates.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    title = message.text.strip()
    if len(title) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(title=title)
    await state.set_state(MemoryStates.waiting_for_content)
    
    await message.answer(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: **{title}**\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        parse_mode="Markdown"
    )


@router.message(MemoryStates.waiting_for_content)
async def process_content(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    content = message.text.strip()
    if len(content) > 2000:
        await message.answer("‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(content=content)
    await state.set_state(MemoryStates.waiting_for_type)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –õ–∏—á–Ω–æ–µ", callback_data="type_personal")],
        [InlineKeyboardButton(text="‚≠ê –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è", callback_data="type_preference")],
        [InlineKeyboardButton(text="üéØ –¶–µ–ª–∏", callback_data="type_goal")],
        [InlineKeyboardButton(text="üí° –ò–¥–µ–∏", callback_data="type_idea")],
        [InlineKeyboardButton(text="üìö –ó–Ω–∞–Ω–∏—è", callback_data="type_knowledge")],
        [InlineKeyboardButton(text="üîó –ö–æ–Ω—Ç–µ–∫—Å—Ç", callback_data="type_context")]
    ])
    
    await message.answer(
        f"‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=keyboard
    )


@router.callback_query(F.data.startswith("type_"))
async def process_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    await callback.answer()
    
    type_mapping = {
        "type_personal": "personal",
        "type_preference": "preference", 
        "type_goal": "goal",
        "type_idea": "idea",
        "type_knowledge": "knowledge",
        "type_context": "context"
    }
    
    memory_type = type_mapping[callback.data]
    await state.update_data(memory_type=memory_type)
    await state.set_state(MemoryStates.waiting_for_importance)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="1", callback_data="imp_1"),
         InlineKeyboardButton(text="2", callback_data="imp_2"),
         InlineKeyboardButton(text="3", callback_data="imp_3")],
        [InlineKeyboardButton(text="4", callback_data="imp_4"),
         InlineKeyboardButton(text="5", callback_data="imp_5"),
         InlineKeyboardButton(text="6", callback_data="imp_6")],
        [InlineKeyboardButton(text="7", callback_data="imp_7"),
         InlineKeyboardButton(text="8", callback_data="imp_8"),
         InlineKeyboardButton(text="9", callback_data="imp_9")],
        [InlineKeyboardButton(text="10", callback_data="imp_10")]
    ])
    
    await callback.message.edit_text(
        f"‚úÖ –¢–∏–ø: **{memory_type}**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å (1-10):",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("imp_"))
async def process_importance(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤–∞–∂–Ω–æ—Å—Ç–∏."""
    await callback.answer()
    
    importance = int(callback.data.split("_")[1])
    await state.update_data(importance=importance)
    await state.set_state(MemoryStates.waiting_for_tags)
    
    await callback.message.edit_text(
        f"‚úÖ –í–∞–∂–Ω–æ—Å—Ç—å: **{importance}/10**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–∞–±–æ—Ç–∞, –≤–∞–∂–Ω–æ–µ, –ø—Ä–æ–µ–∫—Ç",
        parse_mode="Markdown"
    )


@router.message(MemoryStates.waiting_for_tags)
async def process_tags(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–≥–∏ –∏ —Å–æ–∑–¥–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
    tags = message.text.strip() if message.text else None
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    db_manager = DatabaseManager()
    memory_service = MemoryBankService(db_manager)
    
    try:
        memory = await memory_service.create_memory(
            user_id=message.from_user.id,
            title=data["title"],
            content=data["content"],
            memory_type=data["memory_type"],
            importance=data["importance"],
            tags=tags
        )
        
        await state.clear()
        
        await message.answer(
            f"‚úÖ **–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
            f"üìù **{memory.title}**\n"
            f"üìÇ –¢–∏–ø: {memory.memory_type}\n"
            f"‚≠ê –í–∞–∂–Ω–æ—Å—Ç—å: {memory.importance}/10\n"
            f"üè∑Ô∏è –¢–µ–≥–∏: {memory.tags or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
            f"üÜî ID: {memory.id}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data == "memory_search")
async def start_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    await callback.answer()
    await state.set_state(MemoryStates.searching_memories)
    
    await callback.message.edit_text(
        "üîç **–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
        parse_mode="Markdown"
    )


@router.message(MemoryStates.searching_memories)
async def process_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å."""
    query = message.text.strip()
    
    db_manager = DatabaseManager()
    memory_service = MemoryBankService(db_manager)
    
    try:
        memories = await memory_service.search_memories(
            user_id=message.from_user.id,
            query_text=query,
            limit=10
        )
        
        if not memories:
            await message.answer("‚ùå –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return
        
        result_text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}**\n\n"
        
        for i, memory in enumerate(memories, 1):
            result_text += (
                f"{i}. **{memory.title}**\n"
                f"   üìÇ {memory.memory_type} | ‚≠ê {memory.importance}/10\n"
                f"   üìù {memory.content[:100]}{'...' if len(memory.content) > 100 else ''}\n"
                f"   üÜî ID: {memory.id}\n\n"
            )
        
        await message.answer(result_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


@router.callback_query(F.data == "memory_list")
async def list_memories(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    await callback.answer()
    
    db_manager = DatabaseManager()
    memory_service = MemoryBankService(db_manager)
    
    try:
        memories = await memory_service.get_user_memories(
            user_id=callback.from_user.id,
            limit=10
        )
        
        if not memories:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return
        
        result_text = "üìã **–í–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è**\n\n"
        
        for i, memory in enumerate(memories, 1):
            result_text += (
                f"{i}. **{memory.title}**\n"
                f"   üìÇ {memory.memory_type} | ‚≠ê {memory.importance}/10\n"
                f"   üìù {memory.content[:100]}{'...' if len(memory.content) > 100 else ''}\n"
                f"   üÜî ID: {memory.id}\n\n"
            )
        
        await callback.message.edit_text(result_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.")


@router.callback_query(F.data == "memory_stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    await callback.answer()
    
    db_manager = DatabaseManager()
    memory_service = MemoryBankService(db_manager)
    
    try:
        stats = await memory_service.get_memory_stats(user_id=callback.from_user.id)
        
        result_text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Memory Bank**\n\n"
        result_text += f"üìù –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: **{stats['total_memories']}**\n\n"
        
        if stats['memories_by_type']:
            result_text += "üìÇ –ü–æ —Ç–∏–ø–∞–º:\n"
            for mem_type, count in stats['memories_by_type'].items():
                result_text += f"   ‚Ä¢ {mem_type}: {count}\n"
        
        if stats['recent_memories']:
            result_text += "\nüïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            for memory in stats['recent_memories']:
                result_text += f"   ‚Ä¢ {memory['title']} ({memory['type']})\n"
        
        await callback.message.edit_text(result_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")


@router.callback_query(F.data == "memory_cancel")
async def cancel_memory_operation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
@router.message(Command("memories"))
async def quick_memories_list(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    await list_memories(message)


@router.message(Command("memsearch"))
async def quick_memory_search(message: Message, state: FSMContext):
    """–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    await start_search(message, state)
