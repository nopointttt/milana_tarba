"""src/handlers/context_handler.py
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.
"""
from __future__ import annotations

import json
from typing import Dict, List, Any
from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

from src.services.openai_context_service import OpenAIContextService
from src.config import Settings
from src.db.connection import get_db_manager

router = Router()

# –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
simple_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
data_input_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="input_data")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏
data_management_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="update_data")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="clear_additional")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_contexts: Dict[int, List[Dict[str, Any]]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º—è, –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)
user_data: Dict[int, Dict[str, str]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
additional_data: Dict[int, List[Dict[str, str]]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
pinned_messages: Dict[int, int] = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME_MESSAGE = """üåü –ü–†–ò–í–ï–¢! –Ø –¢–í–û–ô –¶–ò–§–†–û–í–û–ô –ü–°–ò–•–û–õ–û–ì –ü–û –°–ò–°–¢–ï–ú–ï –ú–ò–õ–ê–ù–´ –¢–ê–†–ë–ê.

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–Ω—è—Ç—å —Å–µ–±—è —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º–µ–Ω–∏. 

üîÆ –ß–¢–û –Ø –£–ú–ï–Æ:
‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ß–°, –ß–î, –ú–∞—Ç—Ä–∏—Ü—É, –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏
‚Ä¢ –î–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥ —Ç–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ

üìù –î–õ–Ø –ù–ê–ß–ê–õ–ê –ú–ù–ï –ù–£–ñ–ù–´ –¢–í–û–ò –î–ê–ù–ù–´–ï:
‚Ä¢ –ò–º—è (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: Ivan)
‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (dd.mm.yyyy)

–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã, –∏ —è –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!"""


@router.message(CommandStart())
async def on_start(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ –Ω–æ–≤–æ–º —Å—Ç–∞—Ä—Ç–µ
    if user_id in user_contexts:
        del user_contexts[user_id]
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_contexts[user_id] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
        await show_user_data_message(message)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        await message.answer(
            WELCOME_MESSAGE,
            reply_markup=data_input_keyboard,
        )


@router.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def show_help(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É."""
    help_text = """üìñ –°–ü–†–ê–í–ö–ê

üí¨ –ö–ê–ö –û–ë–©–ê–¢–¨–°–Ø:
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –¥—Ä—É–≥—É. –Ø –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–ø—Ä–æ—Å—ã.

üìÖ –§–û–†–ú–ê–¢ –î–ê–¢–´ –†–û–ñ–î–ï–ù–ò–Ø:
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: dd.mm.yyyy
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: 15.03.1990, 01.01.2000

üë§ –§–û–†–ú–ê–¢ –ò–ú–ï–ù–ò:
‚Ä¢ –¢–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ: Ivan
‚Ä¢ –¢–æ–ª—å–∫–æ –∏–º—è (–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: John, Maria, Alex, Anna, Michael

üîÆ –ß–¢–û –û–ó–ù–ê–ß–ê–Æ–¢ –ß–ò–°–õ–ê:
‚Ä¢ –ß–° - —á–µ–≥–æ —Ö–æ—á–µ—Ç —Ç–≤–æ—è –¥—É—à–∞ (—Ç–æ–ª—å–∫–æ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è)
‚Ä¢ –ß–î - –∫–∞–∫ —Ç—ã –¥–µ–π—Å—Ç–≤—É–µ—à—å –ø–æ—Å–ª–µ 33 –ª–µ—Ç (–≤—Å—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è)
‚Ä¢ –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏ - —ç–Ω–µ—Ä–≥–∏—è —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏
‚Ä¢ –ú–∞—Ç—Ä–∏—Ü–∞ - –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ —Ç–µ–±–µ –∑–∞–ª–æ–∂–µ–Ω—ã

‚ú® –ü–†–ê–ö–¢–ò–ö–ò:
–Ø –ø–æ–¥–±–µ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–æ–¥ –ª—é–±–æ–π —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å.

–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ ¬´–ö–Ω–∏–≥–µ –ó–Ω–∞–Ω–∏–π –ø–æ –¶–∏—Ñ—Ä–æ–ª–æ–≥–∏–∏¬ª —Å–∏—Å—Ç–µ–º—ã –ú–∏–ª–∞–Ω—ã –¢–∞—Ä–±–∞."""
    
    await message.answer(help_text)


async def send_typing_status(message: types.Message) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏."""
    try:
        await message.bot.send_chat_action(message.chat.id, "typing")
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞

async def send_status_message(message: types.Message, status_text: str) -> types.Message:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ."""
    try:
        status_msg = await message.answer(f"‚è≥ {status_text}")
        return status_msg
    except Exception:
        return None

async def update_status_message(status_msg: types.Message, new_text: str) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        if status_msg:
            await status_msg.edit_text(f"‚è≥ {new_text}")
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏

def is_additional_data(message_text: str, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."""
    if user_id not in user_data:
        return False
    
    user_main_data = user_data[user_id]
    lines = [line.strip() for line in message_text.strip().split('\n') if line.strip()]
    
    if len(lines) == 2:
        name, date = lines[0], lines[1]
        # –ï—Å–ª–∏ –∏–º—è –∏–ª–∏ –¥–∞—Ç–∞ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (is_name_format(name) and is_date_format(date) and 
            (name != user_main_data.get('name') or date != user_main_data.get('birth_date'))):
            return True
    
    return False

def extract_additional_data(message_text: str) -> Dict[str, str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    lines = [line.strip() for line in message_text.strip().split('\n') if line.strip()]
    if len(lines) == 2:
        return {
            'name': lines[0],
            'birth_date': lines[1]
        }
    return {}

def clear_additional_data(user_id: int) -> None:
    """–û—á–∏—â–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id in additional_data:
        additional_data[user_id] = []

async def handle_data_input(message: types.Message) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."""
    user_id = message.from_user.id
    user_message = message.text.strip()
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    if user_id in user_data:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö
    lines = user_message.split('\n')
    lines = [line.strip() for line in lines if line.strip()]
    
    if len(lines) == 2:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –∏–º—è –∏ –¥–∞—Ç—É –≤ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö
        name = lines[0]
        birth_date = lines[1]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await send_typing_status(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await send_status_message(message, "–ü—Ä–æ–≤–µ—Ä—è—é –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ...")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        if await validate_and_save_data(message, name, birth_date):
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if status_msg:
                    await status_msg.delete()
            except Exception:
                pass
            return True
    
    elif len(lines) == 1:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        text = lines[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await send_typing_status(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        status_msg = await send_status_message(message, "–ü—Ä–æ–≤–µ—Ä—è—é –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–∞—Ç–æ–π
        if is_date_format(text):
            # –≠—Ç–æ –¥–∞—Ç–∞, –∂–¥–µ–º –∏–º—è
            if user_id not in user_data:
                user_data[user_id] = {}
            user_data[user_id]["birth_date"] = text
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if status_msg:
                    await status_msg.delete()
            except Exception:
                pass
            
            await message.answer("‚úÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–º–µ–Ω–µ–º
        elif is_name_format(text):
            # –≠—Ç–æ –∏–º—è, –∂–¥–µ–º –¥–∞—Ç—É
            if user_id not in user_data:
                user_data[user_id] = {}
            user_data[user_id]["name"] = text
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if status_msg:
                    await status_msg.delete()
            except Exception:
                pass
            
            await message.answer("‚úÖ –ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (dd.mm.yyyy):")
            return True
    
    return False


def is_date_format(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –¥–∞—Ç–æ–π."""
    import re
    date_patterns = [
        r'\d{1,2}\.\d{1,2}\.\d{4}',
        r'\d{1,2}/\d{1,2}/\d{4}',
        r'\d{1,2}-\d{1,2}-\d{4}',
        r'\d{1,2}\s+\d{1,2}\s+\d{4}'
    ]
    
    for pattern in date_patterns:
        if re.match(pattern, text):
            return True
    return False


def is_name_format(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–º–µ–Ω–µ–º."""
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –¥–ª–∏–Ω–∞ 2-20 —Å–∏–º–≤–æ–ª–æ–≤
    if not text or not text.strip():
        return False
    
    text = text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ (–Ω–µ—Ç –ø—Ä–æ–±–µ–ª–æ–≤)
    if ' ' in text:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–∏–º–≤–æ–ª—ã - –±—É–∫–≤—ã
    if not text.isalpha():
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
    if len(text) < 2 or len(text) > 20:
        return False
    
    return True


async def validate_and_save_data(message: types.Message, name: str, birth_date: str) -> bool:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–º—è
    if not is_name_format(name):
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–¥–Ω–æ —Å–ª–æ–≤–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: Ivan")
        return True
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞—Ç—É
    if not is_date_format(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dd.mm.yyyy, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20.05.1997")
        return True
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É
    try:
        from datetime import datetime
        date_formats = ["%d.%m.%Y", "%d/%m/%Y", "%d-%m-%Y", "%d %m %Y"]
        
        for fmt in date_formats:
            try:
                d = datetime.strptime(birth_date, fmt)
                birth_date = d.strftime("%d.%m.%Y")
                break
            except ValueError:
                continue
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ dd.mm.yyyy, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20.05.1997")
        return True
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    user_data[user_id] = {
        "name": name,
        "birth_date": birth_date
    }
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
    await show_user_data_message(message)
    
    return True


@router.message()
async def process_message(message: types.Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    user_message = message.text.strip()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in user_contexts:
        user_contexts[user_id] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–æ–¥–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–Ω–Ω—ã–µ
    if await handle_data_input(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_data:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üìù –í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ'",
            reply_markup=data_input_keyboard
        )
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    user_contexts[user_id].append({
        "role": "user",
        "content": user_message
    })
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = Settings.from_env()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db_manager = get_db_manager()
        async with db_manager.get_session() as session:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å OpenAI
            openai_service = OpenAIContextService(
                api_key=settings.openai_api_key,
                db_session=session
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            await send_typing_status(message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_msg = await send_status_message(message, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if is_additional_data(user_message, user_id):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                await update_status_message(status_msg, "–°–æ—Ö—Ä–∞–Ω—è—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                additional_info = extract_additional_data(user_message)
                if user_id not in additional_data:
                    additional_data[user_id] = []
                additional_data[user_id].append(additional_info)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                user_data_info = user_data[user_id]
                enhanced_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n\n–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–º—è: {user_data_info['name']}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data_info['birth_date']}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:\n–ò–º—è: {additional_info['name']}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {additional_info['birth_date']}"
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                user_data_info = user_data[user_id]
                enhanced_message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n\n–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–ò–º—è: {user_data_info['name']}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data_info['birth_date']}"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await update_status_message(status_msg, "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await openai_service.process_message(
                user_message=enhanced_message,
                user_id=user_id,
                context=user_contexts[user_id]
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                if status_msg:
                    await status_msg.delete()
            except Exception:
                pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            user_contexts[user_id].append({
                "role": "assistant",
                "content": response
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (10 –ø–∞—Ä)
            if len(user_contexts[user_id]) > 20:
                user_contexts[user_id] = user_contexts[user_id][-20:]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            await message.answer(response, parse_mode="Markdown")
    
    except Exception as e:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
        await send_typing_status(message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        status_msg = await send_status_message(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            if status_msg:
                await status_msg.delete()
        except Exception:
            pass
        
        error_message = f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
        await message.answer(error_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "input_data")
async def handle_input_data(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ'."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await send_status_message(callback_query.message, "–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in pinned_messages:
        try:
            await callback_query.bot.delete_message(
                chat_id=callback_query.message.chat.id,
                message_id=pinned_messages[user_id]
            )
        except:
            pass
        del pinned_messages[user_id]
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if status_msg:
            await status_msg.delete()
    except Exception:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤–≤–æ–¥—É –¥–∞–Ω–Ω—ã—Ö
    instruction_message = """üìù **–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:**

**1. –ò–º—è (—Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):**
–ù–∞–ø—Ä–∏–º–µ—Ä: Ivan, Maria, John

**2. –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:**
–§–æ—Ä–º–∞—Ç: dd.mm.yyyy
–ù–∞–ø—Ä–∏–º–µ—Ä: 20.05.1997

**–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:**
```
Ivan
20.05.1997
```

–ò–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–Ω–∞—á–∞–ª–∞ –∏–º—è
‚Ä¢ –ü–æ—Ç–æ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"""
    
    await callback_query.message.edit_text(
        instruction_message,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_input")]
            ]
        ),
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data == "update_data")
async def handle_update_data(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await send_status_message(callback_query.message, "–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
    
    # –û—á–∏—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö
    clear_additional_data(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if status_msg:
            await status_msg.delete()
    except Exception:
        pass
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    await handle_input_data(callback_query)


@router.callback_query(lambda c: c.data == "clear_additional")
async def handle_clear_additional(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—á–∏—Å—Ç–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await send_status_message(callback_query.message, "–û—á–∏—â–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    # –û—á–∏—â–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    clear_additional_data(user_id)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        if status_msg:
            await status_msg.delete()
    except Exception:
        pass
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await show_user_data_message(callback_query.message)

@router.callback_query(lambda c: c.data == "cancel_input")
async def handle_cancel_input(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    if user_id in user_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await show_user_data_message(callback_query.message)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await callback_query.message.edit_text(
            WELCOME_MESSAGE,
            reply_markup=data_input_keyboard,
        )


@router.callback_query(lambda c: c.data == "help")
async def handle_help_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    await callback_query.answer()
    
    help_text = """üìñ **–°–ü–†–ê–í–ö–ê**

**üí¨ –ö–∞–∫ –æ–±—â–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –¥—Ä—É–≥—É. –Ø –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –∑–∞–ø—Ä–æ—Å—ã.

**üìÖ –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è:**
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: dd.mm.yyyy
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: 15.03.1990, 01.01.2000

**üë§ –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏:**
‚Ä¢ –¢–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –û–¥–Ω–æ —Å–ª–æ–≤–æ (–±–µ–∑ —Ñ–∞–º–∏–ª–∏–∏)
‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã: Ivan, Maria, John

**üîÆ –ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º–µ–Ω–∏
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –≥–æ–¥/–º–µ—Å—è—Ü/–¥–µ–Ω—å
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
‚Ä¢ –°–æ–≤–µ—Ç—ã –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ü–æ–¥–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫

**üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–î–∞–π –º–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–æ—é –º–∞—Ç—Ä–∏—Ü—É"
‚Ä¢ "–ù—É–∂–Ω—ã –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
‚Ä¢ "–ü–æ–º–æ–≥–∏ —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏"
‚Ä¢ "–ß—Ç–æ –º–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?"""
    
    await callback_query.message.edit_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        ),
        parse_mode="Markdown"
    )


@router.callback_query(lambda c: c.data == "back_to_main")
async def handle_back_to_main(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    await callback_query.answer()
    
    user_id = callback_query.from_user.id
    
    if user_id in user_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await show_user_data_message(callback_query.message)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await callback_query.message.edit_text(
            WELCOME_MESSAGE,
            reply_markup=data_input_keyboard,
        )


async def show_user_data_message(message: types.Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    
    if user_id not in user_data:
        return
    
    data = user_data[user_id]
    name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    birth_date = data.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    additional_count = len(additional_data.get(user_id, []))
    
    data_message = f"""‚úÖ **–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!**

üë§ **–ò–º—è:** {name}
üìÖ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {birth_date}"""
    
    if additional_count > 0:
        data_message += f"\n\nüìä **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:** {additional_count} —á–µ–ª–æ–≤–µ–∫"
    
    data_message += f"""

**üí¨ –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã:**
‚Ä¢ "–î–∞–π –º–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≥–æ–¥"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–æ—é –º–∞—Ç—Ä–∏—Ü—É"
‚Ä¢ "–ù—É–∂–Ω—ã –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
‚Ä¢ "–ü–æ–º–æ–≥–∏ —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏"
‚Ä¢ "–°—Ä–∞–≤–Ω–∏ –º–µ–Ω—è —Å [–ò–º—è] [–î–∞—Ç–∞]" - –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤!"""
    
    sent_message = await message.answer(
        data_message,
        reply_markup=data_management_keyboard,
        parse_mode="Markdown"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    pinned_messages[user_id] = sent_message.message_id


def get_user_context(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return user_contexts.get(user_id, [])


def clear_user_context(user_id: int) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if user_id in user_contexts:
        del user_contexts[user_id]
