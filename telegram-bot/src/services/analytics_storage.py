"""src/services/analytics_storage.py
–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
"""
from __future__ import annotations

from datetime import date, datetime, timezone
from typing import Any, Dict, Optional

from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src.db.models import ReportRequest, ReportStatus, User


class AnalyticsStorageService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏."""
    
    def __init__(self, session: AsyncSession):
        self.session = session
    
    async def save_analysis_result(
        self,
        user_id: int,
        full_name: str,
        birth_date: date,
        analysis_result: Dict[str, Any],
        status: ReportStatus = ReportStatus.DONE,
        error_message: Optional[str] = None,
    ) -> ReportRequest:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç
        report_text = self._format_analysis_for_storage(analysis_result)
        
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—á—ë—Ç–∞
        report_request = ReportRequest(
            user_id=user_id,
            full_name=full_name,
            birth_date=birth_date,
            status=status,
            result_text=report_text if status == ReportStatus.DONE else None,
            error=error_message if status == ReportStatus.ERROR else None,
        )
        
        self.session.add(report_request)
        return report_request
    
    async def get_user_analyses(
        self,
        user_id: int,
        limit: int = 10,
        offset: int = 0,
    ) -> list[ReportRequest]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        stmt = (
            select(ReportRequest)
            .where(ReportRequest.user_id == user_id)
            .order_by(ReportRequest.created_at.desc())
            .limit(limit)
            .offset(offset)
        )
        
        result = await self.session.execute(stmt)
        return list(result.scalars().all())
    
    async def get_analysis_by_id(
        self,
        analysis_id: int,
        user_id: int,
    ) -> Optional[ReportRequest]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ ID."""
        stmt = select(ReportRequest).where(
            ReportRequest.id == analysis_id,
            ReportRequest.user_id == user_id,
        )
        
        result = await self.session.execute(stmt)
        return result.scalar_one_or_none()
    
    def _format_analysis_for_storage(self, analysis_result: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î."""
        input_data = analysis_result.get("input_data", {})
        calculations = analysis_result.get("calculations", {})
        matrix = analysis_result.get("matrix", {})
        interpretations = analysis_result.get("interpretations", {})
        
        report_lines = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        report_lines.append("üîÆ **–ê–ù–ê–õ–ò–ó –ü–û –¶–ò–§–†–û–í–û–ô –ü–°–ò–•–û–õ–û–ì–ò–ò**")
        report_lines.append("=" * 50)
        
        # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        report_lines.append("\nüìã **–í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:**")
        report_lines.append(f"‚Ä¢ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {input_data.get('birth_date', 'N/A')}")
        
        if input_data.get('has_name', False):
            report_lines.append(f"‚Ä¢ –ò–º—è: {input_data.get('original_name', 'N/A')}")
            if input_data.get('is_cyrillic', False):
                report_lines.append(f"‚Ä¢ –õ–∞—Ç–∏–Ω–∏—Ü–µ–π: {input_data.get('latin_name', 'N/A')}")
        else:
            report_lines.append("‚Ä¢ –ò–º—è: –ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        # –†–∞—Å—á—ë—Ç—ã
        report_lines.append("\nüßÆ **–†–ê–°–ß–Å–¢–´:**")
        report_lines.append(f"‚Ä¢ –ß–∏—Å–ª–æ –°–æ–∑–Ω–∞–Ω–∏—è (–ß–°): {calculations.get('consciousness_number', 'N/A')}")
        report_lines.append(f"‚Ä¢ –ß–∏—Å–ª–æ –î–µ–π—Å—Ç–≤–∏—è (–ß–î): {calculations.get('action_number', 'N/A')}")
        
        if calculations.get('name_number') is not None:
            report_lines.append(f"‚Ä¢ –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏: {calculations['name_number']}")
        else:
            report_lines.append("‚Ä¢ –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏: –ù–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ")
        
        # –ú–∞—Ç—Ä–∏—Ü–∞
        if matrix:
            report_lines.append("\nüî¢ **–ú–ê–¢–†–ò–¶–ê:**")
            
            # –ü–æ–¥—Å—á—ë—Ç —Ü–∏—Ñ—Ä
            digit_counts = matrix.get('digit_counts', {})
            if digit_counts:
                report_lines.append("‚Ä¢ –ü–æ–¥—Å—á—ë—Ç —Ü–∏—Ñ—Ä:")
                for digit in sorted(digit_counts.keys()):
                    count = digit_counts[digit]
                    report_lines.append(f"  - –¶–∏—Ñ—Ä–∞ {digit}: {count} —Ä–∞–∑")
            
            # –ê–Ω–∞–ª–∏–∑
            analysis = matrix.get('analysis', {})
            if analysis:
                report_lines.append("‚Ä¢ –ê–Ω–∞–ª–∏–∑ —ç–Ω–µ—Ä–≥–∏–π:")
                if isinstance(analysis, dict):
                    for energy_type, description in analysis.items():
                        report_lines.append(f"  - {energy_type}: {description}")
                else:
                    # –ï—Å–ª–∏ analysis - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    report_lines.append(f"  - {analysis}")
        
        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        if interpretations:
            report_lines.append("\nüí≠ **–ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–ò:**")
            
            if 'consciousness_interpretation' in interpretations:
                report_lines.append(f"‚Ä¢ –ß–°: {interpretations['consciousness_interpretation']}")
            
            if 'action_interpretation' in interpretations:
                report_lines.append(f"‚Ä¢ –ß–î: {interpretations['action_interpretation']}")
            
            if 'name_interpretation' in interpretations:
                report_lines.append(f"‚Ä¢ –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏: {interpretations['name_interpretation']}")
        
        # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
        exceptions = analysis_result.get("exceptions", {})
        if exceptions.get("has_chs_chd_conflict", False):
            report_lines.append("\n‚ö†Ô∏è **–û–°–û–ë–´–ï –°–õ–£–ß–ê–ò:**")
            report_lines.append("‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –ß–°/–ß–î")
        
        return "\n".join(report_lines)
