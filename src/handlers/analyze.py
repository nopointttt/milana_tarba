"""src/handlers/analyze.py
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
from __future__ import annotations

from aiogram import Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from src.services.analytics.analytics_service import AnalyticsService

router = Router()
analytics_service = AnalyticsService()


@router.message()
async def perform_analysis(message: types.Message) -> None:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    text = message.text.strip()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞—Ç—É –∏ –∏–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    lines = [line.strip() for line in text.split('\n') if line.strip()]
    
    if len(lines) < 2:
        await message.answer(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ:\n"
            "‚Ä¢ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy\n"
            "‚Ä¢ –ü–æ–ª–Ω–æ–µ –∏–º—è\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "29.02.1988\n"
            "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
        )
        return
    
    # –ò—â–µ–º –¥–∞—Ç—É –∏ –∏–º—è
    birth_date = None
    full_name = None
    
    for line in lines:
        if analytics_service.validate_birth_date(line):
            birth_date = line
        elif analytics_service.validate_name(line):
            full_name = line
    
    if not birth_date or not full_name:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –∏–º—è.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "‚Ä¢ **–î–∞—Ç–∞:** dd.mm.yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03.1990)\n"
            "‚Ä¢ **–ò–º—è:** –ü–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤)",
            parse_mode="Markdown"
        )
        return
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è—é —Ä–∞—Å—á—ë—Ç—ã...")
        
        analysis = analytics_service.analyze_person(birth_date, full_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç
        report = _format_analysis_report(analysis)
        
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –ú–∞—Ç—Ä–∏—Ü–∞", callback_data=f"matrix_{message.from_user.id}")],
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ])
        
        await message.answer(report, parse_mode="Markdown", reply_markup=keyboard)
        
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


def _format_analysis_report(analysis: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –∞–Ω–∞–ª–∏–∑–∞."""
    input_data = analysis["input_data"]
    calculations = analysis["calculations"]
    matrix = analysis["matrix"]
    interpretations = analysis["interpretations"]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    report = f"# üîÆ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —Å–∏—Å—Ç–µ–º–µ –ú–∏–ª–∞–Ω—ã –¢–∞—Ä–±–∞\n\n"
    
    # –í–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    report += f"## üìã –í–≤–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
    report += f"‚Ä¢ **–ò–º—è:** {input_data['original_name']}\n"
    if input_data['is_cyrillic']:
        report += f"‚Ä¢ **–õ–∞—Ç–∏–Ω–∏—Ü–µ–π:** {input_data['latin_name']}\n"
    report += f"‚Ä¢ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** {input_data['birth_date']}\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞
    report += f"## üî¢ –ö–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞\n"
    report += f"‚Ä¢ **–ß–∏—Å–ª–æ –°–æ–∑–Ω–∞–Ω–∏—è (–ß–°):** {calculations['consciousness_number']}\n"
    report += f"‚Ä¢ **–ß–∏—Å–ª–æ –î–µ–π—Å—Ç–≤–∏—è (–ß–î):** {calculations['action_number']}\n"
    report += f"‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏:** {calculations['name_number']}\n\n"
    
    # –ú–∞—Ç—Ä–∏—Ü–∞
    report += f"## üìä –ú–∞—Ç—Ä–∏—Ü–∞ —ç–Ω–µ—Ä–≥–∏–π\n"
    if matrix['strong_digits']:
        report += f"‚Ä¢ **–°–∏–ª—å–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏:** {', '.join(map(str, matrix['strong_digits']))} (100% –∏ –≤—ã—à–µ)\n"
    if matrix['weak_digits']:
        report += f"‚Ä¢ **–°–ª–∞–±—ã–µ —ç–Ω–µ—Ä–≥–∏–∏:** {', '.join(map(str, matrix['weak_digits']))} (50%)\n"
    if matrix['missing_digits']:
        report += f"‚Ä¢ **–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —ç–Ω–µ—Ä–≥–∏–∏:** {', '.join(map(str, matrix['missing_digits']))}\n"
    report += f"‚Ä¢ **–ê–Ω–∞–ª–∏–∑:** {matrix['analysis']}\n\n"
    
    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    report += f"## üí° –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è\n"
    report += f"‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏:** {interpretations['name_interpretation']}\n\n"
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è
    if analysis['exceptions']['has_chs_chd_conflict']:
        report += f"‚ö†Ô∏è **–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ:** –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –ß–° –∏ –ß–î\n\n"
    
    # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
    report += f"---\n"
    report += f"*–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ –±–∞–∑–µ –ø—Ä–∞–≤–∏–ª –∏–∑ ¬´–ö–Ω–∏–≥–∏ –ó–Ω–∞–Ω–∏–π –ø–æ –¶–∏—Ñ—Ä–æ–ª–æ–≥–∏–∏¬ª. "
    report += f"–†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî –Ω–µ –ø—Ä–∏–≥–æ–≤–æ—Ä, –∞ –∫–∞—Ä—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.*"
    
    return report


@router.callback_query(lambda c: c.data == "new_analysis")
async def new_analysis_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑'."""
    await callback_query.message.edit_text(
        "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        "‚Ä¢ **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:** dd.mm.yyyy\n"
        "‚Ä¢ **–ü–æ–ª–Ω–æ–µ –∏–º—è:** –í–∞—à–µ –∏–º—è\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "29.02.1988\n"
        "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
        parse_mode="Markdown"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "help")
async def help_callback(callback_query: types.CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å'."""
    help_text = (
        "üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–Ω–∞–ª–∏–∑—É**\n\n"
        "**–ß—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —á–∏—Å–ª–∞:**\n"
        "‚Ä¢ **–ß–°** - —á–µ–≥–æ —Ö–æ—á–µ—Ç –≤–∞—à–∞ –¥—É—à–∞\n"
        "‚Ä¢ **–ß–î** - –∫–∞–∫ –≤—ã –¥–µ–π—Å—Ç–≤—É–µ—Ç–µ –ø–æ—Å–ª–µ 33 –ª–µ—Ç\n"
        "‚Ä¢ **–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏** - —ç–Ω–µ—Ä–≥–∏—è –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏\n"
        "‚Ä¢ **–ú–∞—Ç—Ä–∏—Ü–∞** - –∫–∞–∫–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –≤ –≤–∞—Å –∑–∞–ª–æ–∂–µ–Ω—ã\n\n"
        "**–°–∏–ª–∞ —ç–Ω–µ—Ä–≥–∏–π –≤ –º–∞—Ç—Ä–∏—Ü–µ:**\n"
        "‚Ä¢ 1 —Ü–∏—Ñ—Ä–∞ = 50% –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ 2 —Ü–∏—Ñ—Ä—ã = 100% –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ 3+ —Ü–∏—Ñ—Ä = —É—Å–∏–ª–µ–Ω–∏–µ –Ω–∞ —Å–ø–∞–¥\n\n"
        "–í—Å–µ —Ä–∞—Å—á—ë—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ ¬´–ö–Ω–∏–≥–µ –ó–Ω–∞–Ω–∏–π –ø–æ –¶–∏—Ñ—Ä–æ–ª–æ–≥–∏–∏¬ª."
    )
    
    await callback_query.message.edit_text(help_text, parse_mode="Markdown")
    await callback_query.answer()
