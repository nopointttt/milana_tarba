"""test_algorithms.py
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
"""
from src.services.analytics.analytics_service import AnalyticsService


def test_example_from_book():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑ ¬´–ö–Ω–∏–≥–∏ –ó–Ω–∞–Ω–∏–π¬ª: 29.02.1988, Milana."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑ ¬´–ö–Ω–∏–≥–∏ –ó–Ω–∞–Ω–∏–π¬ª: 29.02.1988, Milana")
    print("=" * 60)
    
    service = AnalyticsService()
    
    try:
        analysis = service.analyze_person("29.02.1988", "Milana")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÖ –î–∞—Ç–∞: {analysis['input_data']['birth_date']}")
        print(f"üë§ –ò–º—è: {analysis['input_data']['original_name']}")
        print(f"üî§ –õ–∞—Ç–∏–Ω–∏—Ü–µ–π: {analysis['input_data']['latin_name']}")
        print()
        
        calculations = analysis['calculations']
        print("üî¢ –ö–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞:")
        print(f"  ‚Ä¢ –ß–°: {calculations['consciousness_number']}")
        print(f"  ‚Ä¢ –ß–î: {calculations['action_number']}")
        print(f"  ‚Ä¢ –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏: {calculations['name_number']}")
        print()
        
        matrix = analysis['matrix']
        print("üìä –ú–∞—Ç—Ä–∏—Ü–∞:")
        print(f"  ‚Ä¢ –°–∏–ª—å–Ω—ã–µ: {matrix['strong_digits']}")
        print(f"  ‚Ä¢ –°–ª–∞–±—ã–µ: {matrix['weak_digits']}")
        print(f"  ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {matrix['missing_digits']}")
        print()
        
        print("üí° –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–Ω–∏–≥–∏:")
        print("  ‚Ä¢ –ß–°: 2 (29 -> 2+9=11 -> 1+1=2)")
        print("  ‚Ä¢ –ß–î: 3 (2+9+0+2+1+9+8+8=39 -> 3+9=12 -> 1+2=3)")
        print("  ‚Ä¢ –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏: 6 (M=4, I=1, L=3, A=1, N=5, A=1 = 15 -> 6)")
        print()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        assert calculations['consciousness_number'] == 2, f"–ß–° –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2, –ø–æ–ª—É—á–µ–Ω {calculations['consciousness_number']}"
        assert calculations['action_number'] == 3, f"–ß–î –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 3, –ø–æ–ª—É—á–µ–Ω {calculations['action_number']}"
        assert calculations['name_number'] == 6, f"–ß–∏—Å–ª–æ –ò–º–µ–Ω–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 6, –ø–æ–ª—É—á–µ–Ω–æ {calculations['name_number']}"
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


def test_cyrillic_name():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤")
    print("=" * 60)
    
    service = AnalyticsService()
    
    try:
        analysis = service.analyze_person("15.03.1990", "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÖ –î–∞—Ç–∞: {analysis['input_data']['birth_date']}")
        print(f"üë§ –ò–º—è: {analysis['input_data']['original_name']}")
        print(f"üî§ –õ–∞—Ç–∏–Ω–∏—Ü–µ–π: {analysis['input_data']['latin_name']}")
        print(f"üî§ –ö–∏—Ä–∏–ª–ª–∏—Ü–∞: {analysis['input_data']['is_cyrillic']}")
        print()
        
        calculations = analysis['calculations']
        print("üî¢ –ö–ª—é—á–µ–≤—ã–µ —á–∏—Å–ª–∞:")
        print(f"  ‚Ä¢ –ß–°: {calculations['consciousness_number']}")
        print(f"  ‚Ä¢ –ß–î: {calculations['action_number']}")
        print(f"  ‚Ä¢ –ß–∏—Å–ª–æ –ò–º–µ–Ω–∏: {calculations['name_number']}")
        print()
        
        print("‚úÖ –¢—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


def test_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    service = AnalyticsService()
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞—Ç
    valid_dates = ["15.03.1990", "01.01.2000", "29.02.1988"]
    invalid_dates = ["15-03-1990", "1990-03-15", "32.13.1990", "abc"]
    
    print("üìÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç:")
    for date_str in valid_dates:
        result = service.validate_birth_date(date_str)
        print(f"  {date_str}: {'‚úÖ' if result else '‚ùå'}")
    
    for date_str in invalid_dates:
        result = service.validate_birth_date(date_str)
        print(f"  {date_str}: {'‚ùå' if not result else '‚úÖ'}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º—ë–Ω
    valid_names = ["–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", "Ivan Petrov", "–ê–Ω–Ω–∞", "Anna"]
    invalid_names = ["", "–ò–≤–∞–Ω123", "Ivan@Petrov", "   "]
    
    print("\nüë§ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º—ë–Ω:")
    for name in valid_names:
        result = service.validate_name(name)
        print(f"  {name}: {'‚úÖ' if result else '‚ùå'}")
    
    for name in invalid_names:
        result = service.validate_name(name)
        print(f"  {name}: {'‚ùå' if not result else '‚úÖ'}")
    
    print("\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("=" * 60)
    
    test_example_from_book()
    test_cyrillic_name()
    test_validation()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
