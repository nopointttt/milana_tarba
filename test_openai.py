"""test_openai.py
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI.
"""
import asyncio
import sys

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å event loop –Ω–∞ Windows
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

from src.config import Settings
from src.services.openai_service import OpenAIService
from src.services.analytics.analytics_service import AnalyticsService


async def test_openai_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å OpenAI."""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OpenAI...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = Settings.from_env()
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–æ–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment})")
        
        if not settings.openai_api_key:
            print("‚ùå OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")
            return False
        
        # –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å OpenAI
        openai_service = OpenAIService(
            api_key=settings.openai_api_key,
            assistant_id=settings.openai_assistant_id
        )
        print("‚úÖ OpenAI —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        analytics_service = AnalyticsService()
        analysis_data = analytics_service.analyze_person(
            birth_date="15.03.1990",
            full_name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤"
        )
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á—ë—Ç
        print("ü§ñ –ü–æ–ª—É—á–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
        personalized_report = await openai_service.analyze_person(
            birth_date="15.03.1990",
            full_name="–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
            analysis_data=analysis_data
        )
        
        print("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω:")
        print("=" * 50)
        print(personalized_report)
        print("=" * 50)
        
        print("\nüéâ –¢–µ—Å—Ç OpenAI –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    success = await test_openai_integration()
    if not success:
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
